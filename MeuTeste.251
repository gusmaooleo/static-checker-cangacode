program Factorial

declarations
integer: n;
integer: result;
real: values[5];
string: greeting;
endDeclarations

/*
 * Programa escrito em CangaCode2025-1
 * Este é um comentário em bloco.
 */

functions
funcType integer:             factorial(paramType integer: n) {
    // se n <= 1, retorna 1
    if (n <= 1) {
        return 1
    } else {
        // recursao: n * factorial(n-1) -> a gramática não permite recursão...
        return n *                  factorial(paramType integer: (n - 1)) // os espaços são propositais, os filtros devem eliminar esses espaços extras, bem como este comentário.
    } endIf
}             endFunction;

funcType void: main(paramType ?) {
    n@@ := 5;
    result := factorial(paramType integer: n); // atribuição para result
    
    // exemplo de uso de print
    print /*result*/sadasd
    
    while (n < 10) {
        n := n + 1
    } endWhile

    greeting := "Esta é uma string, espaços extras    aqui       dentro      não devem      ser   eliminados.";
    
    return
} endFunction

/*
 * Programa escrito em CangaCode2025-1
 * Este é um outro comentário em bloco.
 */

endFunctions

endProgram
